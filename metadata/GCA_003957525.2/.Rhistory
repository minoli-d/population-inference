taxon <- read.csv('population_datasets/taxon.csv')
popdensity <- read.csv('population_datasets/TetraDENSITY_v.1.csv')
species <- read.table('docs/assembly_metadata_wide.tsv', sep='\t', header=T)
species_list <- species$scientific_name
iucn_key <- "9bb4facb6d23f48efbf424bb05c0c1ef1cf6f468393bc745d42179ac4aca5fee"
get_iucn_info <- function(species) {
iucn_data <- rl_search(name = species, key = iucn_key)
return(iucn_data$result)
}
iucn_info_list <- lapply(species_list, get_iucn_info)
iucn_info <- do.call(rbind, iucn_info_list)
print(iucn_info)
##
species_test <- c('Abramis brama')
rl_search(name=species_test, key=iucn_key)
View(iucn_info)
View(iucn_info)
write.csv('docs/iucn_data.csv')
write.csv('docs/iucn_data.csv')
write.csv('docs/iucn_data.csv', iucn_info)
View(iucn_info)
write.csv(iucn_info, 'docs/iucn_data.csv')
with_criteria <- iucn_info[!is.na(iucn_info$criteria), ]
with_criteria <- iucn_info[!is.na(iucn_info$criteria), ]
with_criteria
with_criteria <- iucn_info[!is.na(iucn_info$criteria), ]
with_trend <- iucn_info[!(is.na(iucn_info$population_trend) & !(iucn_info$population_trend) == ), ]
with_criteria <- iucn_info[!is.na(iucn_info$criteria), ]
with_trend <- iucn_info[!(is.na(iucn_info$population_trend) & (!(iucn_info$population_trend == 'Unknown')), ]
with_criteria <- iucn_info[!is.na(iucn_info$criteria), ]
with_trend <- iucn_info[!(is.na(iucn_info$population_trend) & (!(iucn_info$population_trend == 'Unknown')) ]
knitr::opts_chunk$set(echo = TRUE)
library(taxize)
library(rredlist)
library(dplyr)
View(with_criteria)
View(with_criteria)
with_criteria <- iucn_info %>% filter(!is.na(criteria))
with_trend <- iucn_info %>% filter(is.na(population_trend) | population_trend == "Unknown")
View(with_trend)
View(with_trend)
with_criteria <- iucn_info %>% filter(!is.na(criteria))
with_trend <- iucn_info %>% filter(!(is.na(population_trend) | population_trend == "Unknown"))
with_criteria <- iucn_info %>% filter(!is.na(criteria))
with_trend <- iucn_info %>% filter(!(is.na(population_trend) | population_trend == "Unknown"))
## population estimations
population_criteria <- iucn_info %>% filter(str_detect(criteria, "C|D"))
knitr::opts_chunk$set(echo = TRUE)
library(taxize)
library(rredlist)
library(dplyr)
library(stringr)
with_criteria <- iucn_info %>% filter(!is.na(criteria))
with_trend <- iucn_info %>% filter(!(is.na(population_trend) | population_trend == "Unknown"))
## population estimations
population_criteria <- iucn_info %>% filter(str_detect(criteria, "C|D"))
# with_popestimates <- iucn_info %>%
#   mutate(population_estimate = case_when(
#     category == "CR" & criteria == "C" ~ "<250",
#     category == "EN" & criteria == "C" ~ "<2500",
#     category == "VU" & criteria == "C" ~ "<10000",
#
#     category == "CR" & criteria == "D" ~ "<50",
#     category == "EN" & criteria == "D" ~ "<250",
#     category == "VU" & criteria == "D" ~ "<10000",
#
#     TRUE ~ NA_character_  # Default case if conditions are not met
#   ))
View(population_criteria)
View(population_criteria)
with_criteria <- iucn_info %>% filter(!is.na(criteria))
with_trend <- iucn_info %>% filter(!(is.na(population_trend) | population_trend == "Unknown"))
## population estimations
population_criteria <- iucn_info %>% filter(str_detect(criteria, "C|D"))
with_popestimates <- population_criteria %>%
mutate(population_estimate = case_when(
category == "CR" & str_detect(criteria, "C") ~ "<250",
category == "EN" & str_detect(criteria, "C") ~ "<2500",
category == "VU" & str_detect(criteria, "C") ~ "<10000",
category == "CR" & criteria == "D" ~ "<50",
category == "EN" & criteria == "D" ~ "<250",
category == "VU" & criteria == "D1" ~ "<1000",
TRUE ~ NA_character_))
View(with_popestimates)
with_criteria <- iucn_info %>% filter(!is.na(criteria))
with_trend <- iucn_info %>% filter(!(is.na(population_trend) | population_trend == "Unknown"))
## population estimations
population_criteria <- iucn_info %>% filter(str_detect(criteria, "C|D"))
with_popestimates <- iucn_info %>%
filter(str_detect(criteria, "C|D")) %>%
mutate(population_estimate = case_when(
category == "CR" & str_detect(criteria, "C") ~ "<250",
category == "EN" & str_detect(criteria, "C") ~ "<2500",
category == "VU" & str_detect(criteria, "C") ~ "<10000",
category == "CR" & str_detect(criteria, "D") ~ "<50",
category == "EN" & str_detect(criteria, "D") ~ "<250",
category == "VU" & str_detect(criteria, "D1") ~ "<1000",
TRUE ~ NA_character_))
knitr::opts_chunk$set(echo = TRUE)
library(taxize)
library(rredlist)
library(dplyr)
library(stringr)
library(ggplot2)
ggplot(iucn_info, aes(x = category)) +
geom_bar() +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(iucn_info, aes(x = category)) +
geom_bar() +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count", color='lightblue') +
theme_minimal()
ggplot(iucn_info, aes(x = category)) +
geom_bar(aes(color='lightblue')) +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(iucn_info, aes(x = category)) +
geom_bar(aes(fil='lightblue')) +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(iucn_info, aes(x = category)) +
geom_bar(aes(fill='lightblue')) +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(iucn_info, aes(x = category)) +
geom_bar(fill='lightblue') +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(with_criteria, aes(x = category)) +
geom_bar(fill='lightblue') +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
dplyr::count(iucn_info, category, sort = TRUE)
ggplot(iucn_info, aes(x = category)) +
geom_bar() +
labs(title = "Overall Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(iucn_info, aes(x = reorder(-category))) +
geom_bar() +
labs(title = "Overall Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(iucn_info, aes(x = reorder(category))) +
geom_bar() +
labs(title = "Overall Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(iucn_info, aes(x = (category))) +
geom_bar() +
labs(title = "Overall Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(iucn_info, aes(x = (category, +count))) +
ggplot(iucn_info, aes(x = (category)) +
geom_bar(fill='lightblue') +
labs(title = "Overall Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(iucn_info, aes(x = category) +
ggplot(iucn_info, aes(x = category)) +
geom_bar(fill='lightblue') +
labs(title = "Overall Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
ggplot(iucn_info, aes(x = category)) +
geom_bar(fill='lightblue') +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
print(count(iucn_info, category, sort = TRUE))
ggplot(iucn_info, aes(x = category)) +
geom_bar(fill='lightblue') +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(taxize)
library(rredlist)
library(dplyr)
library(stringr)
library(ggplot2)
data <- read.csv('population_datasets/data.csv')
main <- read.csv('population_datasets/main.csv')
taxon <- read.csv('population_datasets/taxon.csv')
popdensity <- read.csv('population_datasets/TetraDENSITY_v.1.csv')
species <- read.table('docs/assembly_metadata_wide.tsv', sep='\t', header=T)
species_list <- species$scientific_name
iucn_key <- "9bb4facb6d23f48efbf424bb05c0c1ef1cf6f468393bc745d42179ac4aca5fee"
get_iucn_info <- function(species) {
iucn_data <- rl_search(name = species, key = iucn_key)
return(iucn_data$result)
}
iucn_info_list <- lapply(species_list, get_iucn_info)
iucn_info <- do.call(rbind, iucn_info_list)
with_criteria <- iucn_info %>% filter(!is.na(criteria))
with_trend <- iucn_info %>% filter(!(is.na(population_trend) | population_trend == "Unknown"))
## adding population estimations
with_popestimates <- iucn_info %>%
filter(str_detect(criteria, "C|D")) %>%
mutate(population_estimate = case_when(
category == "CR" & str_detect(criteria, "C") ~ "<250",
category == "EN" & str_detect(criteria, "C") ~ "<2500",
category == "VU" & str_detect(criteria, "C") ~ "<10000",
category == "CR" & str_detect(criteria, "D") ~ "<50",
category == "EN" & str_detect(criteria, "D") ~ "<250",
category == "VU" & str_detect(criteria, "D1") ~ "<1000",
TRUE ~ NA_character_))
print(count(iucn_info, category, sort = TRUE))
ggplot(iucn_info, aes(x = category)) +
geom_bar(fill='lightblue') +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
# Extinct (EX)
# Extinct in the wild (EW)
# Critically endangered (CE)
# Endangered (EN)
# Vulnerable (VU)
# Near Threatened (NT)
# Lower Risk (LR)
# Data Deficient (DD)
# Not Evaluated (NE)
ggplot(with_criteria, aes(x = category)) +
geom_bar(fill='lightblue') +
labs(title = "Counts of IUCN Categories", x = "IUCN Category", y = "Count") +
theme_minimal()
#write.csv(iucn_info, 'docs/iucn_data.csv')
knitr::opts_chunk$set(echo = TRUE)
library(taxize)
library(rredlist)
library(dplyr)
library(stringr)
library(ggplot2)
library(jsonlite)
stream_in('GCA_040207245.1/assembly_data_report.jsonl')
stream_in(file='GCA_040207245.1/assembly_data_report.jsonl')
stream_in(file('GCA_040207245.1/assembly_data_report.jsonl'))
library(jsonlite)
con <- file('GCA_040207245.1/assembly_data_report.jsonl', open = "r")
library(jsonlite)
data <- stream_in(file("GCA_040207245.1/assembly_data_report.jsonl"))
library(jsonlite)
data <- jsonlite::stream_in(file("GCA_040207245.1/assembly_data_report.jsonl"))
getwd()
setwd("~/Documents/research/sv_diversity/my_files/metadata")
library(jsonlite)
data <- jsonlite::stream_in(file("GCA_040207245.1/assembly_data_report.jsonl"))
wd()
getwd()
data <- jsonlite::stream_in(file("GCA_040207245.1/assembly_data_report.jsonl"))
data <- jsonlite::stream_in(file("GCA_003957525.2/assembly_data_report.jsonl"))
data <- jsonlite::stream_in(file("/GCA_003957525.2/assembly_data_report.jsonl"))
data <- jsonlite::stream_in(file("./GCA_003957525.2/assembly_data_report.jsonl"))
getwd()
setwd("~/Documents/research/sv_diversity/my_files/metadata/GCA_003957525.2")
data <- jsonlite::stream_in(file("assembly_data_report.jsonl"))
data <- jsonlite::stream_in(file("assembly_data_report.jsonl "))
data <- jsonlite::stream_in(file("assembly_data_report.jsonl"))
data <- jsonlite::stream_in(file("my_files/metadata/GCA_003957525.2/
assembly_data_report.jsonl"))
data <- jsonlite::stream_in(file("~/Documents/research/sv_diversity/my_files/metadata/GCA_003957525.2/assembly_data_report.jsonl"))
data <- jsonlite::stream_in(file("~/Documents/research/sv_diversity/my_files/metadata/GCA_003957525.2/assembly_data_report.jsonl"))
View(data)
metadata_dir <- "~/Documents/research/sv_diversity/my_files/metadata"
jsonl_files <- list.files(path = metadata_dir, pattern = "assembly_data_report.jsonl", recursive = TRUE, full.names = TRUE)
metadata <- do.call(rbind, lapply(jsonl_files, function(file) {
json_data <- stream_in(file(file, "r"))
return(json_data)
}))
metadata_dir <- "~/Documents/research/sv_diversity/my_files/metadata"
jsonl_files <- list.files(path = metadata_dir, pattern = "assembly_data_report.jsonl", recursive = TRUE, full.names = TRUE)
# Read each jsonl file and combine into a single dataframe
metadata <- do.call(rbind, lapply(jsonl_files, function(file) {
con <- file(file, "r")  # Open file connection
json_data <- stream_in(con)  # Read in the jsonl data
close(con)  # Close the connection after reading
return(json_data)
}))
library(jsonlite)
library(dplyr)
# Set the path to the metadata folder
metadata_dir <- "~/Documents/research/sv_diversity/my_files/metadata"
# List all jsonl files in all subdirectories
jsonl_files <- list.files(path = metadata_dir, pattern = "assembly_data_report.jsonl", recursive = TRUE, full.names = TRUE)
# Read each jsonl file and combine into a single dataframe
metadata <- bind_rows(lapply(jsonl_files, function(file) {
con <- file(file, "r")  # Open file connection
json_data <- stream_in(con)  # Read in the jsonl data
close(con)  # Close the connection after reading
return(json_data)
}))
# Optionally, inspect the resulting dataframe
head(metadata)
library(jsonlite)
library(dplyr)
library(tidyr)
# Set the path to the metadata folder
metadata_dir <- "~/Documents/research/sv_diversity/my_files/metadata"
# List all jsonl files in all subdirectories
jsonl_files <- list.files(path = metadata_dir, pattern = "assembly_data_report.jsonl", recursive = TRUE, full.names = TRUE)
# Read each jsonl file and combine into a single dataframe
metadata <- do.call(bind_rows, lapply(jsonl_files, function(file) {
con <- file(file, "r")  # Open file connection
json_data <- stream_in(con)  # Read in the jsonl data
close(con)  # Close connection
return(json_data)
}))
# Expand the nested dataframes into individual columns
metadata_expanded <- metadata %>%
unnest(cols = c(assemblyInfo, assemblyStats))  # Unnest both columns
# Optionally, inspect the resulting dataframe
head(metadata_expanded)
library(jsonlite)
library(dplyr)
library(tidyr)
install.packages('janitor')
library(janitor)
# Set the path to the metadata folder
metadata_dir <- "~/Documents/research/sv_diversity/my_files/metadata"
# List all jsonl files in all subdirectories
jsonl_files <- list.files(path = metadata_dir, pattern = "assembly_data_report.jsonl", recursive = TRUE, full.names = TRUE)
# Read each jsonl file and combine into a single dataframe
metadata <- do.call(bind_rows, lapply(jsonl_files, function(file) {
con <- file(file, "r")  # Open file connection
json_data <- stream_in(con)  # Read in the jsonl data
close(con)  # Close connection
return(json_data)
}))
# Expand the nested dataframes into individual columns
metadata_expanded <- metadata %>%
unnest(cols = c(assemblyInfo, assemblyStats))  # Unnest both columns
# Optionally, inspect the resulting dataframe
head(metadata_expanded)
metadata_cleaned <- metadata_expanded %>% clean_names()
View(metadata_cleaned)
View(metadata_cleaned)
View(metadata_expanded)
View(metadata_expanded)
View(data)
View(data)
library(jsonlite)
library(dplyr)
library(tidyr)
install.packages('janitor')
library(janitor)
# Set the path to the metadata folder
metadata_dir <- "~/Documents/research/sv_diversity/my_files/metadata"
# List all jsonl files in all subdirectories
jsonl_files <- list.files(path = metadata_dir, pattern = "assembly_data_report.jsonl", recursive = TRUE, full.names = TRUE)
# Read each jsonl file and combine into a single dataframe
metadata <- do.call(bind_rows, lapply(jsonl_files, function(file) {
con <- file(file, "r")  # Open file connection
json_data <- stream_in(con)  # Read in the jsonl data
close(con)  # Close connection
return(json_data)
}))
# Function to iteratively unnest all nested dataframes in the columns
fully_unnest <- function(df) {
while (any(sapply(df, is.data.frame))) {
df <- df %>%
unnest(cols = where(is.data.frame), keep_empty = TRUE)
}
return(df)
}
# Apply the function to fully unnest the dataframe
metadata_expanded <- fully_unnest(metadata)
library(jsonlite)
library(dplyr)
# Set the path to the metadata folder
metadata_dir <- "~/Documents/research/sv_diversity/my_files/metadata"
# List all jsonl files in all subdirectories
jsonl_files <- list.files(path = metadata_dir, pattern = "assembly_data_report.jsonl", recursive = TRUE, full.names = TRUE)
# Function to read each JSON Lines (.jsonl) file
read_jsonl_file <- function(file) {
con <- file(file, "r")  # Open the file connection
json_data <- stream_in(con)  # Read the JSON Lines data
close(con)  # Close the connection after reading
return(json_data)  # Return the data
}
# Read each jsonl file and combine into a single dataframe
metadata <- do.call(bind_rows, lapply(jsonl_files, read_jsonl_file))
# Inspect the resulting dataframe
head(metadata)
View(metadata)
View(metadata)
library(dplyr)
library(tidyr)
library(purrr)
# Function to expand columns with nested data frames and add a prefix
expand_and_prefix <- function(df) {
# Iterate over each column, checking if it's a data frame
df <- df %>%
mutate(across(where(is.data.frame),
# Set new names with the prefix
~ setNames(., paste0(cur_column(), "_", names(.)))))
# Unnest the columns that are data frames
df <- df %>%
unnest(cols = where(is.data.frame), keep_empty = TRUE)
return(df)
}
# Apply the function to the metadata dataframe
metadata_expanded <- expand_and_prefix(metadata)
# Optionally inspect the resulting dataframe
head(metadata_expanded)
library(dplyr)
library(tidyr)
library(purrr)
# Function to expand columns with nested data frames and add a prefix
expand_and_prefix_recursively <- function(df) {
# While there are data frames inside columns, continue unnesting them
while (any(sapply(df, is.data.frame))) {
df <- df %>%
mutate(across(where(is.data.frame),
~ setNames(., paste0(cur_column(), "_", names(.))))) %>%
unnest(cols = where(is.data.frame), keep_empty = TRUE)
}
return(df)
}
# Apply the function to the metadata dataframe
metadata_expanded <- expand_and_prefix_recursively(metadata)
# Optionally inspect the resulting dataframe
head(metadata_expanded)
metadata_expanded$assemblyInfo_biosample_attributes
library(tidyr)
library(purrr)
expand_and_prefix_recursively <- function(df) {
# Repeat until no columns are data frames
repeat {
# Find which columns are data frames
nested_cols <- sapply(df, is.data.frame)
# If no more data frames are found, exit the loop
if (!any(nested_cols)) break
# For all data frame columns, prefix their column names and unnest
df <- df %>%
mutate(across(where(is.data.frame),
~ setNames(., paste0(cur_column(), "_", names(.))))) %>%
unnest(cols = where(is.data.frame), keep_empty = TRUE)
}
return(df)
}
metadata_expanded <- expand_and_prefix_recursively(metadata)
head(metadata_expanded)
View(metadata_expanded)
View(metadata_expanded)
library(tidyr)
library(purrr)
expand_and_prefix_recursively <- function(df) {
repeat {
# Find columns that are either data frames or lists of data frames
nested_cols <- sapply(df, function(col) is.data.frame(col) || is.list(col) && all(sapply(col, is.data.frame)))
# If no more nested structures are found, break the loop
if (!any(nested_cols)) break
# Expand the data frames and lists of data frames with appropriate prefixing
df <- df %>%
mutate(across(where(is.data.frame),
~ setNames(., paste0(cur_column(), "_", names(.))))) %>%
mutate(across(where(is.list),
~ map_dfr(., as.data.frame, .id = cur_column()))) %>%
unnest(cols = where(is.data.frame), keep_empty = TRUE)
}
return(df)
}
metadata_expanded <- expand_and_prefix_recursively(metadata)
library(tidyr)
library(purrr)
expand_and_prefix_recursively <- function(df) {
repeat {
nested_cols <- sapply(df, is.data.frame)
if (!any(nested_cols)) break
df <- df %>%
mutate(across(where(is.data.frame),
~ setNames(., paste0(cur_column(), "_", names(.))))) %>%
unnest(cols = where(is.data.frame), keep_empty = TRUE)
}
return(df)
}
metadata_expanded <- expand_and_prefix_recursively(metadata)
head(metadata_expanded)
metadata_expanded$assemblyInfo_biosample_owner_contacts
metadata_expanded$assemblyInfo_biosample_owner_contacts[0]
metadata_expanded$assemblyInfo_biosample_owner_contacts[1]
unique(metadata_expanded$assemblyInfo_biosample_owner_contacts)
View(metadata_expanded)
unique(metadata_expanded$assemblyInfo_biosample_description_organism_organismName)
unique(metadata_expanded$assemblyInfo_biosample_description_organism_organismName)[0:10]
metadata_expanded.columns
metadata_expanded.column
cols(metadata_expanded)
col(metadata_expanded)
colnames(metadata_expanded)
colnames(metadata_expanded)
keep_cols <- c("accession",
"assemblyInfo_assemblyLevel",
"assemblyInfo_assemblyType"
)
metadata_expanded$assemblyInfo_bioprojectLineage[0]
View(metadata_expanded[[8]][[1]])
View((metadata_expanded[[8]][[1]])[[1]][[1]])
View(metadata_expanded[[8]][[1]])
View(metadata_expanded[[10]][[1]])
View(metadata_expanded[[8]][[1]])
View((metadata_expanded[[8]][[1]])[[1]][[1]])
View(metadata_expanded[[10]][[1]])
View(metadata_expanded[[10]][[1]])
View(metadata[[48]][[1]])
library(jsonlite)
library(dplyr)
metadata_dir <- "~/Documents/research/sv_diversity/my_files/metadata"
jsonl_files <- list.files(path = metadata_dir, pattern = "assembly_data_report.jsonl", recursive = TRUE, full.names = TRUE)
read_jsonl_file <- function(file) {
con <- file(file)
json_data <- stream_in(con)
close(con)
return(json_data)
}
metadata <- do.call(bind_rows, lapply(jsonl_files, read_jsonl_file))
View(metadata_expanded[[10]][[1]])
View(metadata[[23]][[1]])
View(metadata[[23]][[1]])
View((metadata_expanded[[8]][[1]])[[1]][[1]])
